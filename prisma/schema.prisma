generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  portfolio     Portfolio?
  sessions      Session[]
  watchlist     Watchlist?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Stock {
  id            String   @id @default(uuid())
  symbol        String   @unique
  companyName   String
  price         Float
  volume        Int
  change        Float
  changePercent Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Transaction {
  id        String   @id @default(uuid())
  userEmail String?  // Make optional to handle existing data
  symbol    String
  name      String
  price     Float
  quantity  Int
  type      String
  status    String?  @default("completed") // "pending", "completed", "cancelled"
  createdAt DateTime @default(now())
}

model Portfolio {
  id           String @id @default(uuid())
  userId       String @unique
  holdings     Json
  tradeHistory Json
  funds        Float
  user         User   @relation(fields: [userId], references: [id])
}

model Watchlist {
  id     String @id @default(uuid())
  userId String @unique
  stocks Json
  user   User   @relation(fields: [userId], references: [id])
}
