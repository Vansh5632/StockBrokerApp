generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Change this if using MySQL, SQLite, etc.
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolio     Portfolio?
  watchlist     Watchlist?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
model Stock {
  id             String   @id @default(uuid())
  symbol         String   @unique
  companyName    String
  price          Float
  volume         Int
  change         Float
  changePercent  Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
model Transaction {
  id        String   @id @default(uuid())
  symbol    String
  name      String
  price     Float
  quantity  Int
  type      String   // "buy" or "sell"
  createdAt DateTime @default(now())
}
model Portfolio{
  id          String  @id @default(uuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  holdings    Json    // Stores current holdings as JSON
  tradeHistory Json   // Stores trade history as JSON
  funds       Float   // Available funds for trading
}

model Watchlist {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  stocks    Json
}